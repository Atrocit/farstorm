import { describe, it, test, expect } from 'vitest';
import { Farstorm, defineAutogeneratedField, sql } from '../../src/main.js';
import { defineEntity, defineField, defineIdField } from '../../src/entities/BaseEntity';

const TodoItemSpec = defineEntity({
	fields: {
		id: defineIdField(),
		createdAt: defineAutogeneratedField('Date'),
		description: defineField('string', false),
	},
} as const);

describe('Postgres: findOne', () => {
	async function setup() {
		const entityDefinitions = {
			'TodoItem': TodoItemSpec,
		} as const;

		const db = new Farstorm({
			type: 'postgresql',
			host: process.env['DB_HOST'] ?? 'localhost',
			port: Number(process.env['DB_PORT'] ?? '5432'),
			username: process.env['DB_USERNAME'] ?? '',
			password: process.env['DB_PASSWORD'] ?? '',
			database: process.env['DB_NAME'] ?? '',
			appName: 'farstormTests',
			ssl: false,
			poolSize: 2,
		}, entityDefinitions);

		await db!.inTransaction(async ({ nativeQuery }) => {
			await nativeQuery(sql`begin;`);
			await nativeQuery(sql`drop table if exists "user", "todo_item" cascade;`);

			await nativeQuery(sql`create table "todo_item" (id bigserial primary key, created_at timestamptz not null default now(), description character varying not null)`);
		});

		return {
			db,
			cleanup: async () => {
				await db.inTransaction(async ({ nativeQuery }) => {
					await nativeQuery(sql`drop table if exists "user", "todo_item" cascade;`);
					await nativeQuery(sql`rollback;`);
				});
			},
		};
	}

	it('should insert single entity with autogenerated field', async () => {
		const { db, cleanup } = await setup();
		await db.inTransaction(async ({ findOne, saveOne }) => {
			const todoItem = await saveOne('TodoItem', { description: 'Test' });
			const todoItem2 = await saveOne('TodoItem', { ...todoItem, description: 'Test Updated' });

			const fetchedTodoItem = await findOne('TodoItem', todoItem.id);
			expect(fetchedTodoItem.description).toBe('Test Updated');
			expect(fetchedTodoItem.createdAt).toBeInstanceOf(Date);
			expect(fetchedTodoItem.createdAt).toEqual(todoItem.createdAt);
		});
		await cleanup();
	});
});
